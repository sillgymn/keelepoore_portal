<?php

/**
 * @file
 * Field Location.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Field\WidgetInterface;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\Core\Entity\EntityFieldManager;

/**
 * Implements hook_theme().
 */
function field_location_theme() {
  $info = [];

  $info['google-map-preview'] = [
    'template' => 'google-map-preview',
    'render element' => 'element',
  ];

  return $info;
}

/**
 * Implements hook_element_info_alter().
 */
function field_location_element_info_alter(array &$types) {
  if (isset($types['cshs'])) {
    $types['cshs']['#process'][] = 'field_location_hierarchical_select';
    $types['cshs']['#use_location'] = FALSE;
  }
}

/**
 * Implements hook_field_widget_third_party_settings_form().
 */
function field_location_field_widget_third_party_settings_form(WidgetInterface $plugin, FieldDefinitionInterface $field_definition, $form_mode, array $form, FormStateInterface $form_state) {
  $settings = field_location_cshs_field_widget_third_party_settings($plugin);
  $element = [];

  if (NULL !== $settings) {
    /* @var \Drupal\taxonomy\Entity\Vocabulary $vocabulary */
    $vocabulary = $form_state->get('vocabulary');
    /* @var EntityFieldManager $field_manager */
    $field_manager = \Drupal::service('entity_field.manager');

    if (!empty(field_location_filter($field_manager->getFieldDefinitions('taxonomy_term', $vocabulary->id())))) {
      $element['use_location'] = [
        '#type' => 'checkbox',
        '#title' => t('Use location?'),
        '#description' => t('Vocabulary has "Location" field and hierarchy can be automatically selected using HTML5 geolocation API.'),
        '#default_value' => $settings['use_location'],
      ];
    }
  }

  return $element;
}

/**
 * Implements hook_field_widget_settings_summary_alter().
 */
function field_location_field_widget_settings_summary_alter(array &$summary, array $context) {
  $settings = field_location_cshs_field_widget_third_party_settings($context['widget']);

  if (NULL !== $settings) {
    $summary[] = t('Use location: @value', [
      '@value' => $settings['use_location'] ? t('Yes') : t('No'),
    ]);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function field_location_field_widget_form_alter(array &$element, FormStateInterface $form_state, array $context) {
  $settings = field_location_cshs_field_widget_third_party_settings($context['widget']);

  if (NULL !== $settings) {
    // @see field_location_element_info_alter()
    $element['target_id']['#use_location'] = $settings['use_location'];
  }
}

/**
 * Process CSHS element.
 *
 * @see field_location_element_info_alter()
 *
 * @param array $element
 *   Renderable element.
 * @param FormStateInterface $form_state
 *   Form state object.
 * @param array $complete_form
 *   Form element definitions.
 *
 * @return array
 *   Processed element.
 */
function field_location_hierarchical_select(array $element, FormStateInterface $form_state, array $complete_form) {
  if (empty($element['#use_location'])) {
    return $element;
  }

  /* @var \Drupal\taxonomy\TermStorage $term_storage */
  $term_storage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
  /* @var \Drupal\taxonomy\Entity\Term[] $terms */
  $terms = $term_storage->loadMultiple(array_keys($element['#options']));

  if (!empty($terms)) {
    $location_fields = field_location_filter(reset($terms)->getFieldDefinitions());

    if (!empty($location_fields)) {
      foreach ($element['#options'] as $tid => $data) {
        if (!is_numeric($tid)) {
          continue;
        }

        foreach ($location_fields as $field_name => $field_definition) {
          foreach ($terms[$tid]->get($field_name)->getValue() as $location) {
            $element['#attached']['drupalSettings']['locationFieldsCshs'][$field_name][$element['#id']][$tid] = $location['coordinates'];
          }
        }
      }

      $element['#attached']['library'][] = googlemaps_library(reset($location_fields)->getSetting('googlemaps_library'));
      $element['#attached']['library'][] = 'field_location/google-maps-cshs';
    }
  }

  return $element;
}

/**
 * Get fields of "location" type.
 *
 * @param FieldDefinitionInterface[] $field_definitions
 *   List of field definitions.
 *
 * @return FieldDefinitionInterface[]
 *   Fields of "location" type.
 */
function field_location_filter(array $field_definitions) {
  return array_filter($field_definitions, function (FieldDefinitionInterface $field_definition) {
    return 'location' === $field_definition->getFieldStorageDefinition()->getType();
  });
}

/**
 * Get third-party settings for "cshs" field widget provided by this module.
 *
 * @param WidgetInterface $widget
 *   Widget definition.
 *
 * @return array|NULL
 *   Third-party settings of the widget.
 */
function field_location_cshs_field_widget_third_party_settings(WidgetInterface $widget) {
  return 'cshs' === $widget->getPluginId() ? $widget->getThirdPartySettings('field_location') : NULL;
}
